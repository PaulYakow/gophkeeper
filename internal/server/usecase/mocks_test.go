// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAuthorizationService is a mock of IAuthorizationService interface.
type MockIAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizationServiceMockRecorder
}

// MockIAuthorizationServiceMockRecorder is the mock recorder for MockIAuthorizationService.
type MockIAuthorizationServiceMockRecorder struct {
	mock *MockIAuthorizationService
}

// NewMockIAuthorizationService creates a new mock instance.
func NewMockIAuthorizationService(ctrl *gomock.Controller) *MockIAuthorizationService {
	mock := &MockIAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockIAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorizationService) EXPECT() *MockIAuthorizationServiceMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockIAuthorizationService) RegisterUser(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIAuthorizationServiceMockRecorder) RegisterUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIAuthorizationService)(nil).RegisterUser), login, password)
}

// MockIAuthorizationRepo is a mock of IAuthorizationRepo interface.
type MockIAuthorizationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizationRepoMockRecorder
}

// MockIAuthorizationRepoMockRecorder is the mock recorder for MockIAuthorizationRepo.
type MockIAuthorizationRepoMockRecorder struct {
	mock *MockIAuthorizationRepo
}

// NewMockIAuthorizationRepo creates a new mock instance.
func NewMockIAuthorizationRepo(ctrl *gomock.Controller) *MockIAuthorizationRepo {
	mock := &MockIAuthorizationRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthorizationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorizationRepo) EXPECT() *MockIAuthorizationRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIAuthorizationRepo) CreateUser(login, passwordHash string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, passwordHash)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIAuthorizationRepoMockRecorder) CreateUser(login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIAuthorizationRepo)(nil).CreateUser), login, passwordHash)
}
