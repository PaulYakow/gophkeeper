// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/PaulYakow/gophkeeper/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockIService) LoginUser(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockIServiceMockRecorder) LoginUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockIService)(nil).LoginUser), login, password)
}

// ParseToken mocks base method.
func (m *MockIService) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockIServiceMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockIService)(nil).ParseToken), token)
}

// RegisterUser mocks base method.
func (m *MockIService) RegisterUser(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIServiceMockRecorder) RegisterUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIService)(nil).RegisterUser), login, password)
}

// ViewAllCards mocks base method.
func (m *MockIService) ViewAllCards(userID int) ([]entity.BankDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllCards", userID)
	ret0, _ := ret[0].([]entity.BankDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllCards indicates an expected call of ViewAllCards.
func (mr *MockIServiceMockRecorder) ViewAllCards(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllCards", reflect.TypeOf((*MockIService)(nil).ViewAllCards), userID)
}

// ViewAllNotes mocks base method.
func (m *MockIService) ViewAllNotes(userID int) ([]entity.TextDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllNotes", userID)
	ret0, _ := ret[0].([]entity.TextDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllNotes indicates an expected call of ViewAllNotes.
func (mr *MockIServiceMockRecorder) ViewAllNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllNotes", reflect.TypeOf((*MockIService)(nil).ViewAllNotes), userID)
}

// ViewAllPairs mocks base method.
func (m *MockIService) ViewAllPairs(userID int) ([]entity.PairDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllPairs", userID)
	ret0, _ := ret[0].([]entity.PairDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllPairs indicates an expected call of ViewAllPairs.
func (mr *MockIServiceMockRecorder) ViewAllPairs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllPairs", reflect.TypeOf((*MockIService)(nil).ViewAllPairs), userID)
}

// MockIAuthorizationService is a mock of IAuthorizationService interface.
type MockIAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizationServiceMockRecorder
}

// MockIAuthorizationServiceMockRecorder is the mock recorder for MockIAuthorizationService.
type MockIAuthorizationServiceMockRecorder struct {
	mock *MockIAuthorizationService
}

// NewMockIAuthorizationService creates a new mock instance.
func NewMockIAuthorizationService(ctrl *gomock.Controller) *MockIAuthorizationService {
	mock := &MockIAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockIAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorizationService) EXPECT() *MockIAuthorizationServiceMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockIAuthorizationService) LoginUser(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockIAuthorizationServiceMockRecorder) LoginUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockIAuthorizationService)(nil).LoginUser), login, password)
}

// ParseToken mocks base method.
func (m *MockIAuthorizationService) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockIAuthorizationServiceMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockIAuthorizationService)(nil).ParseToken), token)
}

// RegisterUser mocks base method.
func (m *MockIAuthorizationService) RegisterUser(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIAuthorizationServiceMockRecorder) RegisterUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIAuthorizationService)(nil).RegisterUser), login, password)
}

// MockIPairsService is a mock of IPairsService interface.
type MockIPairsService struct {
	ctrl     *gomock.Controller
	recorder *MockIPairsServiceMockRecorder
}

// MockIPairsServiceMockRecorder is the mock recorder for MockIPairsService.
type MockIPairsServiceMockRecorder struct {
	mock *MockIPairsService
}

// NewMockIPairsService creates a new mock instance.
func NewMockIPairsService(ctrl *gomock.Controller) *MockIPairsService {
	mock := &MockIPairsService{ctrl: ctrl}
	mock.recorder = &MockIPairsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPairsService) EXPECT() *MockIPairsServiceMockRecorder {
	return m.recorder
}

// ViewAllPairs mocks base method.
func (m *MockIPairsService) ViewAllPairs(userID int) ([]entity.PairDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllPairs", userID)
	ret0, _ := ret[0].([]entity.PairDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllPairs indicates an expected call of ViewAllPairs.
func (mr *MockIPairsServiceMockRecorder) ViewAllPairs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllPairs", reflect.TypeOf((*MockIPairsService)(nil).ViewAllPairs), userID)
}

// MockIBankService is a mock of IBankService interface.
type MockIBankService struct {
	ctrl     *gomock.Controller
	recorder *MockIBankServiceMockRecorder
}

// MockIBankServiceMockRecorder is the mock recorder for MockIBankService.
type MockIBankServiceMockRecorder struct {
	mock *MockIBankService
}

// NewMockIBankService creates a new mock instance.
func NewMockIBankService(ctrl *gomock.Controller) *MockIBankService {
	mock := &MockIBankService{ctrl: ctrl}
	mock.recorder = &MockIBankServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBankService) EXPECT() *MockIBankServiceMockRecorder {
	return m.recorder
}

// ViewAllCards mocks base method.
func (m *MockIBankService) ViewAllCards(userID int) ([]entity.BankDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllCards", userID)
	ret0, _ := ret[0].([]entity.BankDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllCards indicates an expected call of ViewAllCards.
func (mr *MockIBankServiceMockRecorder) ViewAllCards(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllCards", reflect.TypeOf((*MockIBankService)(nil).ViewAllCards), userID)
}

// MockITextService is a mock of ITextService interface.
type MockITextService struct {
	ctrl     *gomock.Controller
	recorder *MockITextServiceMockRecorder
}

// MockITextServiceMockRecorder is the mock recorder for MockITextService.
type MockITextServiceMockRecorder struct {
	mock *MockITextService
}

// NewMockITextService creates a new mock instance.
func NewMockITextService(ctrl *gomock.Controller) *MockITextService {
	mock := &MockITextService{ctrl: ctrl}
	mock.recorder = &MockITextServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITextService) EXPECT() *MockITextServiceMockRecorder {
	return m.recorder
}

// ViewAllNotes mocks base method.
func (m *MockITextService) ViewAllNotes(userID int) ([]entity.TextDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllNotes", userID)
	ret0, _ := ret[0].([]entity.TextDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllNotes indicates an expected call of ViewAllNotes.
func (mr *MockITextServiceMockRecorder) ViewAllNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllNotes", reflect.TypeOf((*MockITextService)(nil).ViewAllNotes), userID)
}

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockIRepo) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockIRepoMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockIRepo)(nil).CloseConnection))
}

// CreateUser mocks base method.
func (m *MockIRepo) CreateUser(login, passwordHash string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, passwordHash)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIRepoMockRecorder) CreateUser(login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIRepo)(nil).CreateUser), login, passwordHash)
}

// GetAllCards mocks base method.
func (m *MockIRepo) GetAllCards(ctx context.Context, userID int) ([]entity.BankDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCards", ctx, userID)
	ret0, _ := ret[0].([]entity.BankDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCards indicates an expected call of GetAllCards.
func (mr *MockIRepoMockRecorder) GetAllCards(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCards", reflect.TypeOf((*MockIRepo)(nil).GetAllCards), ctx, userID)
}

// GetAllNotes mocks base method.
func (m *MockIRepo) GetAllNotes(ctx context.Context, userID int) ([]entity.TextDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotes", ctx, userID)
	ret0, _ := ret[0].([]entity.TextDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotes indicates an expected call of GetAllNotes.
func (mr *MockIRepoMockRecorder) GetAllNotes(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotes", reflect.TypeOf((*MockIRepo)(nil).GetAllNotes), ctx, userID)
}

// GetAllPairs mocks base method.
func (m *MockIRepo) GetAllPairs(ctx context.Context, userID int) ([]entity.PairDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPairs", ctx, userID)
	ret0, _ := ret[0].([]entity.PairDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPairs indicates an expected call of GetAllPairs.
func (mr *MockIRepoMockRecorder) GetAllPairs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPairs", reflect.TypeOf((*MockIRepo)(nil).GetAllPairs), ctx, userID)
}

// GetUser mocks base method.
func (m *MockIRepo) GetUser(login string) (entity.UserDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(entity.UserDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIRepoMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIRepo)(nil).GetUser), login)
}

// MockIAuthorizationRepo is a mock of IAuthorizationRepo interface.
type MockIAuthorizationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizationRepoMockRecorder
}

// MockIAuthorizationRepoMockRecorder is the mock recorder for MockIAuthorizationRepo.
type MockIAuthorizationRepoMockRecorder struct {
	mock *MockIAuthorizationRepo
}

// NewMockIAuthorizationRepo creates a new mock instance.
func NewMockIAuthorizationRepo(ctrl *gomock.Controller) *MockIAuthorizationRepo {
	mock := &MockIAuthorizationRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthorizationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorizationRepo) EXPECT() *MockIAuthorizationRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIAuthorizationRepo) CreateUser(login, passwordHash string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, passwordHash)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIAuthorizationRepoMockRecorder) CreateUser(login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIAuthorizationRepo)(nil).CreateUser), login, passwordHash)
}

// GetUser mocks base method.
func (m *MockIAuthorizationRepo) GetUser(login string) (entity.UserDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(entity.UserDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIAuthorizationRepoMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIAuthorizationRepo)(nil).GetUser), login)
}

// MockIPairsRepo is a mock of IPairsRepo interface.
type MockIPairsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPairsRepoMockRecorder
}

// MockIPairsRepoMockRecorder is the mock recorder for MockIPairsRepo.
type MockIPairsRepoMockRecorder struct {
	mock *MockIPairsRepo
}

// NewMockIPairsRepo creates a new mock instance.
func NewMockIPairsRepo(ctrl *gomock.Controller) *MockIPairsRepo {
	mock := &MockIPairsRepo{ctrl: ctrl}
	mock.recorder = &MockIPairsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPairsRepo) EXPECT() *MockIPairsRepoMockRecorder {
	return m.recorder
}

// GetAllPairs mocks base method.
func (m *MockIPairsRepo) GetAllPairs(ctx context.Context, userID int) ([]entity.PairDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPairs", ctx, userID)
	ret0, _ := ret[0].([]entity.PairDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPairs indicates an expected call of GetAllPairs.
func (mr *MockIPairsRepoMockRecorder) GetAllPairs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPairs", reflect.TypeOf((*MockIPairsRepo)(nil).GetAllPairs), ctx, userID)
}

// MockIBankRepo is a mock of IBankRepo interface.
type MockIBankRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBankRepoMockRecorder
}

// MockIBankRepoMockRecorder is the mock recorder for MockIBankRepo.
type MockIBankRepoMockRecorder struct {
	mock *MockIBankRepo
}

// NewMockIBankRepo creates a new mock instance.
func NewMockIBankRepo(ctrl *gomock.Controller) *MockIBankRepo {
	mock := &MockIBankRepo{ctrl: ctrl}
	mock.recorder = &MockIBankRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBankRepo) EXPECT() *MockIBankRepoMockRecorder {
	return m.recorder
}

// GetAllCards mocks base method.
func (m *MockIBankRepo) GetAllCards(ctx context.Context, userID int) ([]entity.BankDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCards", ctx, userID)
	ret0, _ := ret[0].([]entity.BankDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCards indicates an expected call of GetAllCards.
func (mr *MockIBankRepoMockRecorder) GetAllCards(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCards", reflect.TypeOf((*MockIBankRepo)(nil).GetAllCards), ctx, userID)
}

// MockITextRepo is a mock of ITextRepo interface.
type MockITextRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITextRepoMockRecorder
}

// MockITextRepoMockRecorder is the mock recorder for MockITextRepo.
type MockITextRepoMockRecorder struct {
	mock *MockITextRepo
}

// NewMockITextRepo creates a new mock instance.
func NewMockITextRepo(ctrl *gomock.Controller) *MockITextRepo {
	mock := &MockITextRepo{ctrl: ctrl}
	mock.recorder = &MockITextRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITextRepo) EXPECT() *MockITextRepoMockRecorder {
	return m.recorder
}

// GetAllNotes mocks base method.
func (m *MockITextRepo) GetAllNotes(ctx context.Context, userID int) ([]entity.TextDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotes", ctx, userID)
	ret0, _ := ret[0].([]entity.TextDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotes indicates an expected call of GetAllNotes.
func (mr *MockITextRepoMockRecorder) GetAllNotes(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotes", reflect.TypeOf((*MockITextRepo)(nil).GetAllNotes), ctx, userID)
}
