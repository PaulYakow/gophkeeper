// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPasswordHash is a mock of IPasswordHash interface.
type MockIPasswordHash struct {
	ctrl     *gomock.Controller
	recorder *MockIPasswordHashMockRecorder
}

// MockIPasswordHashMockRecorder is the mock recorder for MockIPasswordHash.
type MockIPasswordHashMockRecorder struct {
	mock *MockIPasswordHash
}

// NewMockIPasswordHash creates a new mock instance.
func NewMockIPasswordHash(ctrl *gomock.Controller) *MockIPasswordHash {
	mock := &MockIPasswordHash{ctrl: ctrl}
	mock.recorder = &MockIPasswordHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPasswordHash) EXPECT() *MockIPasswordHashMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockIPasswordHash) Check(password, hashedPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", password, hashedPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockIPasswordHashMockRecorder) Check(password, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIPasswordHash)(nil).Check), password, hashedPassword)
}

// Hash mocks base method.
func (m *MockIPasswordHash) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockIPasswordHashMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockIPasswordHash)(nil).Hash), password)
}
